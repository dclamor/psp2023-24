
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author at11DAM2
 */
public class teslaBBDD extends javax.swing.JFrame {

    /**
     * Creates new form teslaBBDD
     */
    public final static String DIRECCIONCSV ="D:\\Perfiles\\at11dam2\\DesarrolloInterfaces\\CSV";
    
    public teslaBBDD() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btIterar = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        txtModelo = new javax.swing.JTextField();
        txtPotencia = new javax.swing.JTextField();
        txtAutonomia = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        lblModelo = new javax.swing.JLabel();
        lblPotencia = new javax.swing.JLabel();
        lblAutonomia = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        btCreate = new javax.swing.JButton();
        btRead = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCoches = new javax.swing.JTable();
        btImportCSV = new javax.swing.JButton();
        btExportCSV = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btIterar.setText("Mostrar");
        btIterar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btIterarMouseClicked(evt);
            }
        });
        btIterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIterarActionPerformed(evt);
            }
        });

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        lblId.setText("Id");

        lblModelo.setText("Modelo");

        lblPotencia.setText("Potencia");

        lblAutonomia.setText("Autonomia");

        lblPrecio.setText("Precio");

        btCreate.setText("Create");
        btCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCreateActionPerformed(evt);
            }
        });

        btRead.setText("Read");
        btRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReadActionPerformed(evt);
            }
        });

        btUpdate.setText("Update");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btDelete.setText("Delete");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btClear.setText("Clear");

        tblCoches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Modelo", "Autonomia", "Potencia", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblCoches.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCochesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCoches);

        btImportCSV.setText("ImportCSV");
        btImportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImportCSVActionPerformed(evt);
            }
        });

        btExportCSV.setText("ExportCSV");
        btExportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportCSVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPrecio)
                            .addComponent(lblModelo)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblPotencia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblAutonomia))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtModelo, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(txtId)
                            .addComponent(txtPotencia)
                            .addComponent(txtAutonomia)
                            .addComponent(txtPrecio))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btRead, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btClear, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btImportCSV)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btIterar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btExportCSV)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btIterar)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblId)
                    .addComponent(btCreate)
                    .addComponent(btImportCSV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblModelo)
                    .addComponent(btRead)
                    .addComponent(btExportCSV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPotencia)
                    .addComponent(btUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAutonomia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAutonomia)
                    .addComponent(btDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrecio)
                    .addComponent(btClear))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btIterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIterarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btIterarActionPerformed

    private void btIterarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btIterarMouseClicked
        try {
            //1) La conexion con la bbdd    
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection con = (Connection) DriverManager.getConnection(url, "root", "");

            //2)Preparar consultas
            PreparedStatement pst;
            ResultSet rs;
            String sql = "SELECT * FROM coches";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery(sql);
            while (rs.next()) {
                String id = rs.getString("id");
                String modelo = rs.getString("modelo");
                System.out.println("El coche " + id + " modelo " + modelo);

            }

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btIterarMouseClicked

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCreateActionPerformed
        try {
            //1.Conexión
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection con = (Connection) DriverManager.getConnection(url, "root", "");
            //2.Preparamos la query 
            String sql = "INSERT INTO coches (modelo,potencia,autonomia,precio)VALUES (?,?,?,?)";
            //3.Ejecutamos la query
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, txtModelo.getText());
            ps.setInt(2, Integer.parseInt(txtPotencia.getText()));
            ps.setInt(3, Integer.parseInt(txtAutonomia.getText()));
            ps.setInt(4, Integer.parseInt(txtPrecio.getText()));
            int filas = ps.executeUpdate();
            System.out.println("Filas afectadas: " + filas);
            con.close();

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }

    }//GEN-LAST:event_btCreateActionPerformed

    private void btReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReadActionPerformed

        DefaultTableModel modeloDatos = (DefaultTableModel) tblCoches.getModel();
        modeloDatos.setRowCount(0);
        try {
            //1) La conexion con la bbdd    
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection con = (Connection) DriverManager.getConnection(url, "root", "");

            //2)Preparar consultas
            PreparedStatement pst;
            ResultSet rs;
            String sql = "SELECT * FROM coches";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery(sql);
            while (rs.next()) {
                String id = rs.getString("id");
                String modelo = rs.getString("modelo");
                String potencia = rs.getString("potencia");
                String autonomia = rs.getString("autonomia");
                String precio = rs.getString("precio");
                modeloDatos.addRow(new Object[]{id, modelo, potencia, autonomia, precio});
            }
            con.close();

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }

    }//GEN-LAST:event_btReadActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        DefaultTableModel modeloDatos = (DefaultTableModel) tblCoches.getModel();
        int filaSeleccionada = tblCoches.getSelectedRow();
        String id = String.valueOf(tblCoches.getValueAt(filaSeleccionada, 0));
        System.out.println(id);
        try {
            //1) La conexion con la bbdd    
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection con = (Connection) DriverManager.getConnection(url, "root", "");

            //2)Preparar consultas         
            String sql = "DELETE FROM coches WHERE id=" + id;
            //Ejecutar consulta

            PreparedStatement ps = con.prepareStatement(sql);
            ps.executeUpdate();

            con.close();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }


    }//GEN-LAST:event_btDeleteActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed

        try {
            DefaultTableModel modeloDatos = (DefaultTableModel) tblCoches.getModel();
            int filaSeleccionada = tblCoches.getSelectedRow();

            tblCoches.setValueAt(txtModelo.getText(), filaSeleccionada, 1);
            tblCoches.setValueAt(txtPotencia.getText(), filaSeleccionada, 2);
            tblCoches.setValueAt(txtAutonomia.getText(), filaSeleccionada, 3);
            tblCoches.setValueAt(txtPrecio.getText(), filaSeleccionada, 4);
            int id = Integer.parseInt(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 0)));
            String modelo = String.valueOf(tblCoches.getValueAt(filaSeleccionada, 1));
            int autonomia = Integer.parseInt(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 2)));
            int potencia = Integer.parseInt(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 3)));
            int precio = Integer.parseInt(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 4)));
            System.out.println(id);
            //1) La conexion con la bbdd    
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection con = (Connection) DriverManager.getConnection(url, "root", "");

            //2)Preparar consultas         
            String sql = "UPDATE coches SET modelo=?,potencia=?,autonomia=?,precio=? WHERE id=?";
            //Ejecutar consulta

            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, modelo);
            ps.setInt(2, potencia);
            ps.setInt(3, autonomia);
            ps.setInt(4, precio);
            ps.setInt(5, id);
            ps.executeUpdate();

            con.close();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }

    }//GEN-LAST:event_btUpdateActionPerformed

    private void tblCochesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCochesMouseClicked
        DefaultTableModel modeloDatos = (DefaultTableModel) tblCoches.getModel();
        int filaSeleccionada = tblCoches.getSelectedRow();

        txtId.setText(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 0)));
        txtModelo.setText(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 1)));
        txtPotencia.setText(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 2)));
        txtAutonomia.setText(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 3)));
        txtPrecio.setText(String.valueOf(tblCoches.getValueAt(filaSeleccionada, 4)));

    }//GEN-LAST:event_tblCochesMouseClicked

    private void btImportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImportCSVActionPerformed
        String linea;
        JFileChooser selectorCSV = new JFileChooser();
        selectorCSV.setDialogTitle("Seleccionar CSV");
        selectorCSV.setFileFilter(new FileNameExtensionFilter("Archivos CSV", "csv"));
        // Cargamos fichero de productos frescos
        BufferedReader lectorCSV = null;
        /* try {
            lectorFrescos = new BufferedReader(new FileReader(ProductoFresco.CSV_NOMBRE_FICHERO));
            linea = lectorFrescos.readLine(); // Descartamos el header
            while ((linea = lectorFrescos.readLine()) != null) {
                try {
                    ProductoFresco frescoLeido = ProductoFresco.fromCsvLine(linea);
                    addProductoFresco(frescoLeido);
                } catch (ParametroIncorrectoException e) {
                    System.out.println("Error leyendo '" + ProductoFresco.CSV_NOMBRE_FICHERO
                            + "': " + e.getMessage());
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("Fichero '" + ProductoFresco.CSV_NOMBRE_FICHERO
                    + "' no encontrado, no cargamos nada.");
        } catch (IOException e) {
            System.out.println("Excepción capturada en cargarCsv() leyendo '"
                    + ProductoFresco.CSV_NOMBRE_FICHERO + "': " + e.getMessage());
        } finally {
            try {
                if (lectorFrescos != null) {
                    lectorFrescos.close();
                }
            } catch (IOException e) {
                System.out.println("Excepción capturada al ejecutar lectorFrescos.close(): "
                        + e.getMessage());
            }
        }

        // Cargamos fichero de productos refrigerados
        // EJEMPLO de try-with-resources:
        try (BufferedReader lectorRefrigerados = new BufferedReader(
                new FileReader(ProductoRefrigerado.CSV_NOMBRE_FICHERO))) {
            linea = lectorRefrigerados.readLine(); // Descartamos el header
            while ((linea = lectorRefrigerados.readLine()) != null) {
                try {
                    ProductoRefrigerado refrigeradoLeido = ProductoRefrigerado.fromCsvLine(linea);
                    addProductoRefrigerado(refrigeradoLeido);
                } catch (ParametroIncorrectoException e) {
                    System.out.println("Error leyendo '" + ProductoRefrigerado.CSV_NOMBRE_FICHERO
                            + "': " + e.getMessage());
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("Fichero '" + ProductoRefrigerado.CSV_NOMBRE_FICHERO
                    + "' no encontrado, no cargamos nada.");
        } catch (Exception e) {
            System.out.println("Excepción capturada en cargarCsv() leyendo '"
                    + ProductoRefrigerado.CSV_NOMBRE_FICHERO + "': " + e.getMessage());
        }
         */
    }//GEN-LAST:event_btImportCSVActionPerformed

    private void btExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportCSVActionPerformed
        
        try {
            FileWriter escritorCSV = null;

            escritorCSV = new FileWriter(selectorCSV);
            escritorFrescos.write(ProductoFresco.csvHeader() + "\n");
            for (ProductoFresco fresco : listaFrescos) {
                escritorFrescos.write(fresco.toCsvLine() + "\n");
            }
            escritorFrescos.close();

            System.out.println("Excepción capturada en guardarCsv:");
            e.printStackTrace();

        } catch (Exception e) {
            System.out.println("Excepción capturada en guardarCsv() '"
                    + ProductoRefrigerado.CSV_NOMBRE_FICHERO + "': " + e.getMessage());
        }

    }//GEN-LAST:event_btExportCSVActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(teslaBBDD.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(teslaBBDD.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(teslaBBDD.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(teslaBBDD.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new teslaBBDD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClear;
    private javax.swing.JButton btCreate;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btExportCSV;
    private javax.swing.JButton btImportCSV;
    private javax.swing.JButton btIterar;
    private javax.swing.JButton btRead;
    private javax.swing.JButton btUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAutonomia;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblModelo;
    private javax.swing.JLabel lblPotencia;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JTable tblCoches;
    private javax.swing.JTextField txtAutonomia;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtModelo;
    private javax.swing.JTextField txtPotencia;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
